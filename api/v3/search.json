{"data":[{"identifier":"docs/actions/click_outside","title":"click_outside","text":"click_outside\nclick_outside is a Svelte Action, which runs a on_click_outside(event: MouseEvent): void callback whenever your assigned element is clicked outside of.\n\nImports\nCompatibility\nSvelte Actions are always ran on the Browser only with Javascript is enabled. So should not be used for critical end-user functionality, only progressive enhancement.\n"},{"identifier":"docs/actions/intersection_observer","title":"intersection_observer","text":"intersection_observer\nintersection_observer is a Svelte Action, which runs a on_intersect(intersections: IntersectionObserverEntry[]): void callback whenever the targetted element intersects the root viewport.\n\nNOTE: The below REPL basically reimplements IntersectionRender.\n\n\nImports\nCompatibility\nSvelte Actions are always ran on the Browser only with Javascript is enabled. So should not be used for critical end-user functionality, only progressive enhancement. The Action is dependent on IntersectionObserver.\n"},{"identifier":"docs/actions/keybind","title":"keybind","text":"keybind\nkeybind is a Svelte Action, which runs a on_bind(event: IKeybindEvent): void callback whenever your assigned element has focus.\n\nImports\nCompatibility\nSvelte Actions are always ran on the Browser only with Javascript is enabled. So should not be used for critical end-user functionality, only progressive enhancement.\n"},{"identifier":"docs/actions/mutation_observer","title":"mutation_observer","text":"mutation_observer\nmutation_observer is a Svelte Action, which runs a on_mutate(mutations: MutationRecord[]): void callback whenever the targetted element intersects the root viewport.\n\nImports\nCompatibility\nSvelte Actions are always ran on the Browser only with Javascript is enabled. So should not be used for critical end-user functionality, only progressive enhancement. The Action is dependent on MutationObserver.\n"},{"identifier":"docs/disclosure/accordion","title":"Accordion","text":"Accordion\nAccordion Components are typically used for displaying related content into collapsible stack of buttons, that toggles between views.\n\nImports\nInclusive\nYou can change the behavior of the Accordion to allow multiple items to be revealed at once via the behavior property.\n\nPalette\nYou can change the color palette of the Accordion buttons via the palette property.\n\nLoading\n\nNOTE: Use the in-Browser developer tools to see this functionality in action.\n\nYou can customize the slot loading behavior of individual Accordion.Section Components to not render their children, via the loading property.\n\nTransitions\nYou can use Transition Components to provide fancy switching animations.\n\n"},{"identifier":"docs/disclosure/carousel","title":"Carousel","text":"Carousel\nCarousel allows the user to scroll through \"slides\" of content without having to extend the page dimensions.\n\nImports\nOrientation\nYou can set the Carousel to render vertically via the orientation property.\n\nSpacing\n\nNOTE: By passing an array, you can set responsive values. e.g. spacing={[\"medium\", \"tablet:small\", \"mobile:tiny\"]}\n\nYou can adjust the spacing between items via the spacing, spacing_x, and spacing_y properties.\n\n"},{"identifier":"docs/disclosure/tab","title":"Tab","text":"Tab\nTab Components are typically used for turning what would be multi-page content, into a single page with a set of radio buttons to toggle between views.\n\nImports\n\nPalette\nYou can change the color palette of the Tab radio buttons via the palette property.\n\nSizing\nYou can alter how large each Tab radio button should be via the sizing property.\n\nAlignment\nYou can change the alignment of each Tab radio button via the alignment_x property.\n\nLoading\n\nNOTE: Use the in-Browser developer tools to see this functionality in action.\n\nYou can customize the slot loading behavior of individual Tab.Section Components to not render their children, via the loading property.\n\nAnchor\nYou can substitute Tab.Label for Tab.Anchor to support per-page tabbed views.\n\nTransitions\nYou can use Transition Components to provide fancy switching animations.\n\n"},{"identifier":"docs/display/badge","title":"Badge","text":"Badge\nBadge is typically used to subtlely display to the user some type of ancillary information, relating to its siblings / parent UI elements.\n\nImports\nPalette\nYou can change the color palette of the Badge via the palette property.\n\nPosition\n\nWARNING: This feature has been deprecated for removal in the future. Please use Position instead.\n\nYou can change the position of the Badge to raise it above in its parent to more explictly call out the information.\n\nShape\nYou can modify the shape of the Shape via the shape property.\n\n"},{"identifier":"docs/display/list","title":"List","text":"List\nList is used for rendering simple text lists.\n\nImports\nTypes\nYou can change what type of list is being rendered via the is property.\n\n"},{"identifier":"docs/display/table","title":"Table","text":"Table\nTable is typically used to render tabular data in a structured row -> columns format, for end-users to easily read the contents.\n\nTable Imports\nSpans\nYou can use the colspan / rowspan properties on <Table.Column> / <Table.Heading> to adjust the size of table items they take up.\n\nBorders\nYou can make a Table have borders via the variation property.\n\nStripes\nYou can make a Table have stripes via the variation property.\n\nBorders + Stripes\nYou can make a Table have both borders AND stripes via the variation property.\n\nSizing\nYou can change the sizes / spacings of the child elements via the sizing property.\n\nScrollable Tables\nYou can make a Table scrollable by wrapping it with a Scrollable.\n\n"},{"identifier":"docs/embedded/figure","title":"Figure","text":"Figure\nFigure is a multimedia container Component, providing modifications for things such as images and videos.\n\nImports\nShape\nYou can modify the shape of the child content via the shape property.\n\nSize\nYou can modify the size of the child content between five presets via the size property. Along with separate set of sizes meant for icon-sized content by including variation=\"icon\".\n\nFit\nYou can change how the child content is stretched across the Figure container via the fit property.\n\n"},{"identifier":"docs/feedback/dot","title":"Dot","text":"Dot\nDot is typically used for calling out other UI elements to the end-user, that they need attention.\n\nImports\nPalette\nYou can change the color palette of the Dot via the palette property.\n\nAnimation\nYou can have the Dot perform animations to grab the end-user's attention via the animation property.\n\nPosition\n\nWARNING: This feature has been deprecated for removal in the future. Please use Position instead.\n\nYou can change the position of the Dot to raise it above in its parent to more explictly call out a Component.\n\n"},{"identifier":"docs/feedback/ellipsis","title":"Ellipsis","text":"Ellipsis\nEllipsis is a text-based indicator used to tell the end-user that the Web Application is loading something in the background.\n\nImports\nCharacter\nYou can customize the text character used for the animation via the character property.\n\n"},{"identifier":"docs/feedback/progress","title":"Progress","text":"Progress\nProgress is typically used to render feedback to the end-user about how complete a current task is.\n\nImports\nShape\nYou can modify the shape of the Progress via the shape property.\n\nPalette\nYou can change the color palette of the Progress via the palette property.\n\nSize\nYou can change the size of the Progress via the size property.\n\nIndeterminate\nBy not passing the value property, the Progress will render with an animation for tasks that don't have trackable progression.\n\n"},{"identifier":"docs/feedback/spinner","title":"Spinner","text":"Spinner\nSpinner is an indicator used to tell the end-user that the Web Application is loading something in the background.\n\nImports\nPalette\nYou can change the color palette of the Spinner via the palette property.\n\nSize\nYou can change the size of the Spinner via the size property.\n\n"},{"identifier":"docs/feedback/wave","title":"Wave","text":"Wave\nWave is an indicator used to tell the end-user that the Web Application is loading something in the background.\n\nImports\nPalette\nYou can change the color palette of the Wave via the palette property.\n\n"},{"identifier":"docs/framework/browser-support","title":"Browser Support","text":"Browser Support\nModern Browsers listed below and generally their derivatives. Primary testing happens on Chrome / Firefox, both mobile and desktop. With occasional testing on Gnome Web which is based on WebKit.\n\n\n\n\nChrome\nEdge\nFirefox\nSafari\nEdge (Pre Chromium)\nInternet Explorer\n\n\n\n\nEstimated Minimum\n88+ January 2021\n88+ January 2021\n84+ December 2020\n14.1+ April 2021\nNOT SUPPORTED\nNOT SUPPORTED\n\n\nTested Minimum\n89+\n?\n87+\n?\nNOT SUPPORTED\nNOT SUPPORTED\n\n\n\nFeatures Used\nThe features listed below are used within Kahi UI, and are newer features. So they raise the minimum Browser versions needed.\nCSS\n\nclip-path w/ Shapes\nCSS Custom Properties\nFlexbox w/ Gap\nGrid\ninset\n:is\n:not w/ Selector List\nprefers-color-scheme\n\nJavascript\n\nTODO: Run through the codebase and look for newer JS features used\n\n"},{"identifier":"docs/framework/elements","title":"Elements","text":"Elements\nLike binding DOM nodes, most Components support binding their top-level layout HTMLElement via the element property instead of this.\n\n"},{"identifier":"docs/framework/events","title":"Events","text":"Events\nLike binding normal DOM events with Svelte. Various Components in the framework support forwarding their element's native events, or supply their own events for their own specific logic.\n\n"},{"identifier":"docs/framework/faq","title":"F.A.Q.","text":"F.A.Q.\nWhere can I get help?\nIf you need help with something not properly documented or needs clarification, you can visit the Issue Tracker. File a new issue and it'll be addressed on a spare time effort. Alternatively, visit the Discord Server to talk to other Kahi UI developers.\nWhat Browsers are supported?\nVisit the Browser Support documentation for more information.\nCan I use the library without Svelte?\nYes, however there is no official support to do so. Visit Releases and grab the .css distributable files, and read the library source code on how to do markup, progressive enhancements, etc.\nCan I use the library on Browsers that don't support or have Javascript disabled?\nYes! The library is explictly made in mind that Svelte should be used to sprinkle extra functionality ontop of logic baked in HTML / CSS. If you find something not working properly, file an issue.\nIs Themeing Supported?\nNot at the moment, but that'll be tackled via global CSS Custom Properties at a later time.\nIs Accessibility / ARIA Supported?\nWhile I want to implement full proper support, including keyboard navigation. It is currently not being pursued and will be tackled at a later date. However if you encounter something that'll be detrimental file an issue.\n"},{"identifier":"docs/framework/getting-started","title":"Getting Started","text":"Getting Started\nInstallation\nUsing a terminal inside of your project's directory, use npm to install the package.\nImporting Stylesheet\nFirst if your toolchain supports it, import the required CSS files from @kahi-ui/framework/dist:\nOtherwise download the required CSS files from Releases and use <link rel=\"stylesheet\">:\nUsage\nImport Components by their variable name from @kahi-ui/framework:\n\nSome Components are multi-part patterns, so you'll need to import their namespaces:\n\n"},{"identifier":"docs/framework/responsitivity","title":"Responsitivity","text":"Responsitivity\nKahi UI supports responsive design out of the box for the majority of its Components. Such as Grid, where you can define how many items are displayed at each Viewport.\nViewports\nAs mentioned above, Kahi UI has the concept of four pre-defined breakpoints that are known as Viewports. Which are only active whenever the Browser window's width is within two sizes.\n\n\n\nViewport\nMinimum\nMaximum\n\n\n\n\nmobile\n0px\n640px\n\n\ntablet\n641px\n768px\n\n\ndesktop\n769px\n1024px\n\n\nwidescreen\n1025px\n∞\n\n\n\nSyntax\nTo be able to use Viewport-specific values, you just need to prefix your values with {VIEWPORT}:, e.g. <Grid points=\"mobile:3\">. But then you can't specify default values or other Viewport-specifics. For that you need to pass an array in like below.\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\n\n"},{"identifier":"docs/interactables/button","title":"Button","text":"Button\nButton is used to usually trigger an action in the Web Application, such as submitting forms or opening an Overlay.\n\nImports\nPalette\nYou can change the color palette of the Button via the palette property.\n\nSize\nYou can change the size of the Button via the size property.\n\nClear\nButton components have a special variation that renders as text with no background, that lightly fills in when clicked.\n\nOutline\nButton components have a special variation that renders them as text with an outline, the fills in when clicked.\n\nTypes\nYou can change make the Button a <a> by passing the href property, or a <label> by passing the for property. And also, change the input type between <input type=\"button\" /> (DEFAULT), <input type=\"reset\" />, <input type=\"submit\" /> via the type / value properties.\n\n"},{"identifier":"docs/interactables/check","title":"Check","text":"Check\nCheck is typically used to present a set of options to the end-user, which they can then choose from.\n\nImports\nStates\nYou can control the state of the Check via the active, disabled, and state properties.\n\nPalette\nYou can change the color palette of the Check via the palette property.\n\nSize\nYou can change the size of the Check via the size property.\n\nFlush\nYou can change the appearance of the Check to be flush with the rest of the Application content via the variation property.\n\n"},{"identifier":"docs/interactables/filedropinput","title":"FileDropInput","text":"FileDropInput\n\nNOTE: Keep in mind, while the Component does work without Javascript, it cannot display its value like FileInput can without.\n\nFileDropInput acts as a click-to-prompt and drag'n'drop file input stylized as an alternative to FileInput.\n\nImports\nPalette\nYou can change the color palette of the FileDropInput via the palette property.\n\n"},{"identifier":"docs/interactables/form","title":"Form","text":"Form\n...\n"},{"identifier":"docs/interactables/hiddeninput","title":"HiddenInput","text":"HiddenInput\n...\n"},{"identifier":"docs/interactables/radio","title":"Radio","text":"Radio\nRadio is typically used to present a set of mutually-exclusive options to the end-user, which they can then choose from.\n\nImports\nStates\nYou can control the state of the Radio via the active, disabled, and state properties.\n\nPalette\nYou can change the color palette of the Radio via the palette property.\n\nSize\nYou can change the size of the Radio via the size property.\n\nFlush\nYou can change the appearance of the Radio to be flush with the rest of the Application content via the variation property.\n\n"},{"identifier":"docs/interactables/switch","title":"Switch","text":"Switch\nSwitch is typically used to present to the end-user features, settings, and other toggles that they can turn on / off.\n\nImports\nStates\nYou can control the state of the Switch via the active, disabled, and state properties.\n\nPalette\nYou can change the color palette of the Switch via the palette property.\n\nSize\nYou can change the size of the Switch via the size property.\n\n"},{"identifier":"docs/interactables/textinput","title":"TextInput","text":"TextInput\nTextInput is typically used for capturing string input from an end-user for input into forms, XHR requests, etc.\n\nImports\nPalette\nYou can change the color palette of the TextInput via the palette property.\n\nSize\nYou can change the size of the TextInput via the size property.\n\nBlock\nYou can alter the TextInput render as an opaque block via the variation property.\n\nFlush\nYou can change the appearance of the TextInput to be flush with the rest of the Application content via the variation property.\n\nInput Type\nYou can change your input type between email, password, search, text (DEFAULT), url via the type property.\n\nPlaceholder\nYou can set the TextInput to show placeholder text whenever there is no current value.\n\nField Character Size\nYou can set how wide your TextInput to an approximation of character width via the characters property.\n\nTextArea\nYou can have the TextInput render as a <textarea> via the is property.\n\nField Line Size\nYou can set how tall your <textarea> based TextInput to an approximation of character lines via the lines property.\n\nResizable TextArea\nYou alter the a <textarea> based TextInput to resizable both axis true, horizontally x, and vertically y via the resizable property.\n\n"},{"identifier":"docs/layouts/center","title":"Center","text":"Center\nCenter is a layout primitive used to quickly center the child content within its self.\n\nImports\n"},{"identifier":"docs/layouts/container","title":"Container","text":"Container\nContainer is a layout primitive used to typically constrain chunks of content to a max width or parent width, and centered horizontally with padding. By default it sets the max width to 65 characters.\n\nImports\nViewports\n\nNOTE: By passing an array, you can set responsive values. e.g. viewport={[\"mobile\", \"widescreen:prose\"]}\n\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\nYou can customize the Container to be constrained to specific Viewport sizes.\n\n"},{"identifier":"docs/layouts/divider","title":"Divider","text":"Divider\nDivider is typically used to visually separate content for easier reading comprehension.\n\nImports\nPalette\nYou can change the color palette of the Divider via the palette property.\n\nOrientation\nYou can set the Divider to render vertically via the orientation property.\n\nText\nDivider components can also render text within their separators via passing content into the default slot.\n\n"},{"identifier":"docs/layouts/grid","title":"Grid","text":"Grid\nGrid is a multi-part layout pattern for setting up a grid of items organized to a 12-point system.\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\n\nImports\nPoints\n\nNOTE: By passing an array, you can set responsive values. e.g. points={[\"7\", \"tablet:6\", \"mobile:5\"]}\n\nYou can adjust how many points the Grid.Container items are divided by via the points property.\n\nSpacing\n\nNOTE: By passing an array, you can set responsive values. e.g. spacing={[\"medium\", \"tablet:small\", \"mobile:tiny\"]}\n\nYou can adjust the spacing between items via the spacing, spacing_x, and spacing_y properties.\n\nItem Span\n\nNOTE: By passing an array, you can set responsive values. e.g. span={[\"3\", \"tablet:2\", \"mobile:1\"]}\n\nYou can adjust grid span of individual items via the span, span_x, span_y properties, by wrapping the items in Grid.Item.\n\n"},{"identifier":"docs/layouts/group","title":"Group","text":"Group\nGroup is a layout primitive used for grouping together like Components with their inner border radii removed.\n\nImports\nOrientation\nYou can set the Group to render its children Components vertically, via the orientation property.\n\nStacked\nYou can set the variation property to stacked to visually stack children Components, like avatar stacks.\n\n\n"},{"identifier":"docs/layouts/mosaic","title":"Mosaic","text":"Mosaic\nMosaic is a layout primitive for setting up a mosaic of items organized to displaying as many child items at a certain size as possible.\n\nImports\nSizing\n\nNOTE: By passing an array, you can set responsive values. e.g. sizing={[\"tiny\", \"tablet:medium\", \"mobile:medium\"]}\n\nYou can alter how large each Mosaic item should be via the sizing property.\n\nSpacing\n\nNOTE: By passing an array, you can set responsive values. e.g. spacing={[\"medium\", \"tablet:small\", \"mobile:tiny\"]}\n\nYou can adjust the spacing between items via the spacing, spacing_x, and spacing_y properties.\n\n"},{"identifier":"docs/layouts/position","title":"Position","text":"Position\nPosition is a layout primitive that can float itself and child content in specific regions of the containing Components.\n\nImports\nFloated\nYou can set the Position to float its self (and its children) into a corner relative to its containing layout via the variation property.\n\nRaised\nYou can set the Position to raise its self (and its children) in-place via the variation property.\n\n"},{"identifier":"docs/layouts/scrollable","title":"Scrollable","text":"Scrollable\nScrollable is a layout primitive for encapsulating a given available space into its own scrollable context.\n\nImports\n"},{"identifier":"docs/layouts/spacer","title":"Spacer","text":"Spacer\nSpacer is a layout primitive that takes up all available vertical space between its two immediate siblings.\n\nImports\nSpacing\n\nNOTE: By passing an array, you can set responsive values. e.g. spacing={[\"medium\", \"tablet:small\", \"mobile:tiny\"]}\n\nYou can adjust the spacing between the immediate siblings via the spacing property.\n\nInline\nYou can have the Spacer rendering as an inline <span> that defaults to horizontal orientation via the variation property.\n\n"},{"identifier":"docs/layouts/stack","title":"Stack","text":"Stack\nStack is a layout primitive for setting up a horizontal / vertical stacking of items with even spacing between children. With optional wrapping.\n\nImports\nOrientation\n\nNOTE: By passing an array, you can set responsive values. e.g. orientation={[\"desktop:horizontal\", \"widescreen:horizontal\"]}\n\nYou can set the Stack to render horizontally via the orientation property.\n\nSpacing\n\nNOTE: By passing an array, you can set responsive values. e.g. spacing={[\"medium\", \"tablet:small\", \"mobile:tiny\"]}\n\nYou can adjust the spacing between items via the spacing, spacing_x, and spacing_y properties.\n\nAlignment\n\nNOTE: By passing an array, you can set responsive values. e.g. alignment_x={[\"center\", \"tablet:left\", \"mobile:right\"]}\n\nYou can adjust the spacing between items via the alignment, alignment_x, and alignment_y properties.\n\nWrap\nYou can alter the Stack to wraps its children into the next line via the variation property.\n\n"},{"identifier":"docs/modifiers/hidden","title":"Hidden","text":"Hidden\nAll Components have access to the data-hidden global HTML attribute via the hidden property. Unlike the standard hidden HTML attribute, data-hidden supports Responsitivity.\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\n\n"},{"identifier":"docs/modifiers/html5","title":"HTML5","text":"HTML5\nAll Components have access to several common HTML5 global attributes.\nclass\nclass allows you to apply CSS classes that you've defined to Components. However, you will have to use :global on your class names to bypass Svelte's local scoping.\n\nstyle\nstyle allows you to apply inline CSS properties to Components.\n\nid\nid allows you to set an identifier that other elements can target or targettable for scrolling by a URL fragment.\n\nname\nname allows you to set an identifier for the Component to set its value to in a form, or, can targettable by an Anchor.\n\ntitle\ntitle allows you to set a timed effect to show a text tooltip whenever an end-user hovers for long enough. Typically you don't want to rely on this attribute for the UI. Rather use it for semantic and assistive purposes.\n\ntabindex\ntabindex allows you to configure how the Browser cycles through elements in the current stacking context when they press their tab keyboard button, or similar.\n\n"},{"identifier":"docs/modifiers/sizings","title":"Sizings","text":"Sizings\nAll Components have access to the global width and height HTML data attributes. All of which, supports Responitivity.\nWidth\n\nNOTE: By passing an array, you can set responsive values. e.g. width={[\"25\", \"tablet:viewport-50\"]}\n\nYou can set a defined width for your Components via the width property.\n\nHeight\n\nNOTE: By passing an array, you can set responsive values. e.g. height={[\"25\", \"tablet:viewport-50\"]}\n\nYou can set a defined height for your Components via the height property.\n\nMinimums / Maximums\nYou can also set minimums or maximum sizes via prefixing your properties with max_ or min_.\n\n"},{"identifier":"docs/modifiers/spacings","title":"Spacings","text":"Spacings\nAll Components have access to the global margin and padding HTML data attributes. All of which, supports Responitivity.\nMargin\n\nNOTE: By passing an array, you can set responsive values. e.g. margin={[\"small\", \"tablet:large\"]}\n\nYou can set margins for your Components via the margin property.\n\nPadding\n\nNOTE: By passing an array, you can set responsive values. e.g. padding={[\"small\", \"tablet:large\"]}\n\nYou can set paddings for your Components via the padding property.\n\nDirectional\nAll Spacings properties have directional support via the *_x, *_y, *_left, *_top, *_right, and *_bottom suffixes.\n\n"},{"identifier":"docs/navigation/anchor","title":"Anchor","text":"Anchor\nAnchor are used for navigating from page to page, or to external websites.\n\nImports\nInternal Navigation\nWhen navigating only to an internal Web Application route, you can just set href property with no other properties.\n\nExternal Navigation\nWhen navigating to external links, for security purposes it's recommended to set rel=\"noopener\" to prevent Window.opener from being set on the newly opened page. And also to set rel=\"noreferrer\" for privacy purposes, to prevent the Browser from sending the Referer header to the new page.\n\nPalette\nYou can change the color palette of the Anchor via the palette property.\n\n"},{"identifier":"docs/navigation/aside","title":"Aside","text":"Aside\nAside is used to vertically present the end-user with actions and links that can be accessed anytime on the Web Application.\n\nImports\nPalette\nYou can change the color palette of the Aside via the palette property.\n\nLogic ID\n\nNOTE: When you use a ContextButton within a Aside.Container, it will automatically inherit the set logic_id.\n\n\nNOTE: Interally when the logic_id property is set, the Aside.Container wrapped in an Offscreen Component to provide the collapsing functionality.\n\nYou can make the Overlay collapsible on Mobile and Tablet Viewports via the logic_id property. And then place two ContextButton Components as the last children of a Aside.Container. Where they'll be floated over the Web Application content, with the first one being the open button. And the second one being the close button.\n\nPlacement\n\nIMPORTANT: The placement property does NOT affect how it will appear in your layout. You need to manually handle that.\n\nYou can adjust which side the content divider border will appear, and which side a collapsible Aside.Container will slide out from via the placement property.\n\n"},{"identifier":"docs/navigation/breadcrumb","title":"Breadcrumb","text":"Breadcrumb\nBreadcrumb is typically used to render a series of links with separators. With the each link left of the right-most a state in the end-user's navigation history. Or, a route hierarchy of the Web Application. e.g. directory paths\n\nImports\nSeparator\nYou can alter the separator between items rendered via the separator property.\n\n"},{"identifier":"docs/navigation/menu","title":"Menu","text":"Menu\nMenu renders a nestable list of actionable buttons and links. Typically used in context menus or used as the main content body of Aside.\n\nImports\nOrientation\n\nNOTE: By passing an array, you can set responsive values. e.g. orientation={[\"tablet:horizontal\", \"mobile:horizontal\"]}\n\n\nIMPORTANT: You should never use sub menus whenever using horizontal Menu.Container Components.\n\nYou can alter the orientation of how the Menu.Container lays out the children.\n\nSub Menus\nYou can nest more menus via <Menu.SubMenu> Component and using <svelte:fragment slot=\"sub-menu\"> in <Menu.Divider> or <Menu.Heading> Components.\n\nText Divider\nIn place of <Menu.Heading> you can also use <Menu.Divider> with text content.\n\nPalette\nYou can change the color palette of the Menu.Anchor / Menu.Button / Menu.Label via the palette property.\n\n"},{"identifier":"docs/navigation/omni","title":"Omni","text":"Omni\n\nNOTE: Currently undocumented, will be heavily changed in the future.\n\n...\n"},{"identifier":"docs/overlays/clickable","title":"Clickable","text":"Clickable\nClickable stretches a <Clickable.Anchor> / <Clickable.Label> across its parent element, while surfacing other interactive elements above the overlay.\nImports\nAnchor\nUse a <Clickable.Anchor> to stretch a clickable <a> across the parent container.\n\nLabel\nUse a <Clickable.Label> to stretch a clickable <label> across the parent container.\n\n"},{"identifier":"docs/overlays/offscreen","title":"Offscreen","text":"Offscreen\nOffscreen is typically used for hiding content that'll slide into when actived via a button or something else.\n\nImports\nLogic ID\n\nNOTE: When you use a ContextButton within a Offscreen, it will automatically inherit the set logic_id.\n\nYou can make the Offscreen toggleable via the logic_id property, and then referencing that with a Button.\nHidden\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\nOffscreen adds special handling for the hidden property, allowing you to instead customize when the child content is hidden offscreen or rendered normally.\n\nCaptive\nYou can optionally include a backdrop by passing via the captive property.\n\nDismissible\nYou can optionally have the Offscreen dismissible by clicking the backdrop via the dismissible property.\n\nPlacement\nYou can adjust which side your content is hidden on via the placement property.\n\nAlignment\nYou can align Offscreen content via the alignment, alignment_x, and alignment_y properties respectively.\n\n"},{"identifier":"docs/overlays/overlay","title":"Overlay","text":"Overlay\nOverlay is typically used for rendering full-screen content over the rest of the page, optionally including a backdrop or being toggleable.\n\nImports\nLogic ID\n\nNOTE: When you use a ContextButton within a Overlay, it will automatically inherit the set logic_id.\n\nYou can make the Overlay toggleable via the logic_id property, and then referencing that with a Button.\n\nCaptive\nYou can optionally include a backdrop by passing via the captive property.\n\nDismissible\nYou can optionally have the Overlay dismissible by clicking the backdrop via the dismissible property.\n\nState\n\nWARNING: If you use this to toggle the Overlay, instead of something like the ContextButton. It will not work on Browsers without Javascript enabled.\n\nYou can manually open / close the Overlay via the state property.\n\nOrientation\n\nNOTE: By passing an array, you can set responsive values. e.g. orientation={[\"desktop:horizontal\", \"widescreen:horizontal\"]}\n\nYou can set the Overlay to render horizontally via the orientation property.\n\nAlignment\nYou can align Overlay content via the alignment, alignment_x, and alignment_y properties respectively.\n\nSpacing\nYou can adjust the spacing between Overlay content via the spacing, spacing_x, and spacing_y properties respectively.\n\n"},{"identifier":"docs/overlays/popover","title":"Popover","text":"Popover\nPopover is typically used for hiding content that'll slide onto the page when activated via a button or something else.\n\nImports\nLogic ID\n\nNOTE: When you use a ContextButton within a Popover, it will automatically inherit the set logic_id.\n\nYou can make the Popover toggleable via the logic_id property, and then referencing that with a Button.\nHidden\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\nPopover adds special handling for the hidden property, allowing you to instead customize when the child content is hidden or rendered normally.\n\nDismissible\nYou can optionally have the Popover dismissible by clicking outside the Popover child content via the dismissible property.\n\nState\n\nWARNING: If you use this to toggle the Popover, instead of something like the ContextButton. It will not work on Browsers without Javascript enabled.\n\nYou can manually open / close the Popover via the state property.\n\nPlacement\nYou can adjust which side your content is placed on via the placement property.\n\nAlignment\nYou can align Popover content via the alignment_x and alignment_y properties respectively.\n\n"},{"identifier":"docs/resources/community","title":"Community","text":"Community\nBelow you can find resources by other developers made with Kahi UI or related.\nDiscussion / Support\n\nOther community channels besides the main repository for talking about or getting help with Kahi UI.\n\n\nDiscord — Official support Discord, where you can talk to other Kahi UI developers.\n\nIcons\n\nIconography projects that have been shown to work well with Kahi UI.\n\n\nLucide Icons — Community fork of Feather Icons, provides lightweight SVG icons. (used by this documentation site)\n\n"},{"identifier":"docs/resources/official","title":"Official","text":"Official\nBelow you can find resources made maintained by Kahi UI contributors.\nShowcase\n\nProjects that show off the Kahi UI framework.\n\n\nkahi-framework/kahi-ui.nbn.dev — Official documentation site.\n\nTemplates\n\nProjects that can be used as a basis for your own project, showing how to integrate with various software.\n\n\nkahi-framework/kahi-ui-template-svelte — Official template for Svelte based on npx degit sveltejs/template my-svelte-project starter.\nkahi-framework/kahi-ui-template-sveltekit — Official template for SvelteKit based on the npm init svelte@next starter.\n\n"},{"identifier":"docs/samples/landing-page","title":"Landing Page","text":"Landing Page\nLanding Preview\n\nTODO: Something more impressive can and should be made...?\n\nDisplayed in the main landing page of kahi-ui.nbn.dev.\n\n"},{"identifier":"docs/stores/darkmode","title":"darkmode","text":"darkmode\ndarkmode is a Svelte Store, which returns true whenever either <html data-palette=\"dark\"> or prefersscheme(\"dark\") is validated.\n\nNOTE: Click the color scheme button in the Navigation topbar to see changes.\n\n\nImports\nCompatibility\nThe Store is dependent on MutationObserver / Window.matchMedia. So if you're rendering on the server, it'll always return false.\n"},{"identifier":"docs/stores/htmlpalette","title":"htmlpalette","text":"htmlpalette\nhtmlpalette is a Svelte Store, which is bound to <html data-palette=\"XXX\"> and returns the changes to that attribute. Defaulting to light if not set.\n\nNOTE: Click the color scheme button in the Navigation topbar to see changes.\n\n\nImports\nCompatibility\nThe Store is dependent on MutationObserver. So if you're rendering on the server, it'll always return false.\n"},{"identifier":"docs/stores/id","title":"ID","text":"ID\n...\n"},{"identifier":"docs/stores/mediaquery","title":"mediaquery","text":"mediaquery\nmediaquery / mediaqueries are Svelte Stores, which returns true whenever a provided Media Query is currently active.\n\nImports\nCompatibility\nThe Stores are dependent on Window.matchMedia. So if you're rendering on the server, it'll always return false.\n"},{"identifier":"docs/stores/prefersscheme","title":"prefersscheme","text":"prefersscheme\nprefersscheme is a Svelte Store, which returns true whenever matchMedia(SCHEME) is validated.\n\nNOTE: Change your Operating System's color settings to see changes.\n\n\nImports\nBuilt-in Shortcuts\nThe prefersscheme Store also comes with two preconfigured default shortcuts, prefersdark and preferslight.\n\nCompatibility\nThe Store is dependent on Window.matchMedia. So if you're rendering on the server, it'll always return false.\n"},{"identifier":"docs/stores/scrolllock","title":"scrolllock","text":"scrolllock\nscrolllock is a Svelte Store which sets overflow: hidden; on an HTMLElement whenever the Store is set to true. Restoring the previous value of overflow whenever set back to false. Allowing for connecting Component open states like for modals, to the prevent overscrolling the main document body.\n\nNOTE: If no HTMLElement is passed into the Store function, it'll default to the root <html>.\n\n\nImports\nCompatibility\nThe Store is dependent on setting an element's inline styles via Javascript. So on server, will return a readable Store which will error on having a new value set.\n"},{"identifier":"docs/stores/viewport","title":"viewport","text":"viewport\nviewport / viewports are Svelte Stores, which returns true whenever a Viewport selected in initialization is currently active.\n\nNOTE: The REPL currently does not support viewport values. Resize your Browser instead.\n\n\nImports\nCompatibility\nThe Stores are dependent on Window.matchMedia. So if you're rendering on the server, it'll always return false.\n"},{"identifier":"docs/surfaces/box","title":"Box","text":"Box\nBox is a surface primitive for encapsulating section content in a block of color.\n\nImports\nPalette\nYou can change the color palette of the Box via the palette property.\n\nElevation\nYou can set how \"high\" your Box will appear to be over top the page via the elevation property.\n\nShape\nYou can modify the shape of the Box via the shape property.\n\n"},{"identifier":"docs/surfaces/card","title":"Card","text":"Card\nCard is a multi-part surface pattern for displaying a section of content in a long-form vertical format.\n\nImports\nPalette\nYou can change the color palette of the Card via the palette property.\n\nElevation\nYou can set how \"high\" your Card will appear to be over top the page via the elevation property.\n\nOrientation\n\nNOTE: By passing an array, you can set responsive values. e.g. orientation={[\"desktop:vertical\", \"widescreen:vertical\"]}\n\nYou can set the Card.Footer to render vertically via the orientation property.\n\nSizing\nYou can change the sizes / spacings of the child elements via the sizing property.\n\nFlush\nYou can change the appearance of the Card to be flush with the rest of the Application content via the variation property.\n\n"},{"identifier":"docs/surfaces/hero","title":"Hero","text":"Hero\nHero is a multi-part surface pattern for displaying banner text with subtitling and actions, typically used for landing pages, error messages, and loading placeholders.\n\nImports\nPalette\nYou can change the color palette of the Hero via the palette property.\n\n"},{"identifier":"docs/surfaces/tile","title":"Tile","text":"Tile\nTile is a multi-part surface pattern for displaying a section of content in a short-form horizontal format.\n\nImports\nPalette\nYou can change the color palette of the Tile via the palette property.\n\nElevation\nYou can set how \"high\" your Tile will appear to be over top the page via the elevation property.\n\nOrientation\n\nNOTE: By passing an array, you can set responsive values. e.g. orientation={[\"desktop:vertical\", \"widescreen:vertical\"]}\n\nYou can set the Tile.Footer to render vertically via the orientation property.\n\nSizing\nYou can change the sizes / spacings of the child elements via the sizing property.\n\nFlush\nYou can change the appearance of the Tile to be flush with the rest of the Application content via the variation property.\n\n"},{"identifier":"docs/typography/blockquote","title":"Blockquote","text":"Blockquote\nBlockquote is typically used to render a block of text, that's attributed to a certain source of information.\n\nImports\nPalette\nYou can change the color palette of the Blockquote.Container via the palette property.\n\n"},{"identifier":"docs/typography/code","title":"Code","text":"Code\nCode is used to render inline monospaced text, typically for showing programming code / application configuration to an end-user.\n\nImports\nPalette\nYou can change the color palette of the Component via data-palette.\n\nCode Block\nYou can display blocks of code via a <pre> HTML tag by passing is=\"pre\".\n\n\n"},{"identifier":"docs/typography/heading","title":"Heading","text":"Heading\nHeading is typically used for delineating sections of content within your Web Application.\n\nImports\nSize\nYou can adjust the size of Heading by passing the is property.\n\nPalette\nYou can change the color palette of the Heading via the palette property.\n\nAlign\nYou can adjust the text alignment of the Heading via the align property.\n\nTransform\nYou can alter the rendered text capitalization via the transform property.\n\nVariation\nYou can apply variations to the rendered text, like truncating, via the variation property.\n\n"},{"identifier":"docs/typography/text","title":"Text","text":"Text\nText is used to render paragraphs of text in your interface, among other types of text.\n\nImports\nSize\nYou can adjust the size of Text by passing the size property.\n\nPalette\nYou can change the color palette of the Text via the palette property.\n\nAlign\nYou can adjust the text alignment of the Text via the align property.\n\nTransform\nYou can alter the rendered text capitalization via the transform property.\n\nVariation\nYou can apply variations to the rendered text, like truncating, via the variation property.\n\nPre Formatted\nYou can render text with whitespace and linebreaks preserved via the is property.\n\n\nOther Tags\nYou can also access most of the other HTML text tags via the is property.\n\n"},{"identifier":"docs/utilities/browserrender","title":"BrowserRender","text":"BrowserRender\nBrowserRender disables rendering of child content that either doesn't work in a SSR environment or doesn't make sense there. e.g. <canvas> rendering\n\nNOTE: The REPL runs on your Browser, so this will always show the content.\n\n\nImports\n"},{"identifier":"docs/utilities/contextbackdrop","title":"ContextBackdrop","text":"ContextBackdrop\n...\n"},{"identifier":"docs/utilities/contextbutton","title":"ContextButton","text":"ContextButton\n...\n"},{"identifier":"docs/utilities/intersectionrender","title":"IntersectionRender","text":"IntersectionRender\nIntersectionRender disables rendering of child content before it has come into the root element's viewport at least once. Useful for lazy loading content besides media.\n\nImports\nCompatibility\nThe Component only runs on clientside Browsers with Javascript enabled. So you need to plan a SSR-compatible fallback if using in a SSR scenario. It is also dependent on IntersectionObserver.\nEager\n\nNOTE: It is good practice to give the IntersectionRender a fixed size that generally matches the child content when using this mode. Otherwise you can end up with janky scrolling.\n\nYou can change the behavior of IntersectionObserver by passing in the loading attribute. Which will make the Component ALWAYS disable rendering when outside of the root viewport, not just on initial load.\n\nFallthrough\n\nNOTE: The REPL runs on your Browser, so this will always render anyway.\n\nBy default, IntersectionRender will never render when running in SSR environments. You can change it to always render in those environments via the fallthrough property.\n\n"},{"identifier":"docs/utilities/portal","title":"Portal","text":"Portal\nPortal is used to render a layout outside of its original containing DOM tree, moving it somewhere else.\n\nImports\nCompatibility\nPortal wraps your slotted content in a display: contents containing element, so keep that in mind in your CSS selectors. It also only remounts its self to the target on clientside Browsers with Javascript enabled. So you need to plan a SSR-compatible fallback if using in a SSR scenario.\nLoading\n\nNOTE: Use the in-Browser developer tools to see this functionality in action.\n\nYou can customize the slot loading behavior of Portal Components to not render their children, via the loading property.\n\n"},{"identifier":"docs/utilities/serverrender","title":"ServerRender","text":"ServerRender\nServerRender disables rendering of child content that doesn't work on the Browser, or doesn't make sense there. e.g. reading a file from local disk\n\nNOTE: The REPL runs on your Browser, so this will always be blank.\n\n\nImports\n"},{"identifier":"docs/utilities/transition","title":"Transition","text":"Transition\nTransition is used to apply transitional animations on a containing element that will also include its children. Typically used for situations like changing between pages.\n\nImports\nDelay\nBased on the animaton duration properties in the currently loaded theme. You can use a multiplier percentage decimal to delay it via the delay property.\n\nDuration\nBased on the animaton duration properties in the currently loaded theme. You can use a multiplier percentage decimal to increase / shorten the animation duration via the duration property.\n\nDirection\nYou can control which direction the Transition animation will \"expand\", \"move\", or whatever your selected animations performs. Via the direction property.\n\nFade\nThe simplest of all the animations, you can fade content in and out via the animation property.\n\nBy supplying a variation off the bat, you can also have the animation played as soon as the DOM is loaded.\n\nClip\nYou can have content \"clip\" in and out via the animation property.\n\nBy supplying a variation off the bat, you can also have the animation played as soon as the DOM is loaded.\n\nScale\nYou can have content \"scale\" in and out via the animation property.\n\nBy supplying a variation off the bat, you can also have the animation played as soon as the DOM is loaded.\n\nSlide\nYou can have content \"slide\" in and out via the animation property.\n\nBy supplying a variation off the bat, you can also have the animation played as soon as the DOM is loaded.\n\n"}]}