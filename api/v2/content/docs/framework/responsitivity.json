{"data":{"properties":{"created_at":1635359402000,"custom_properties":{},"events":{},"identifier":"framework/responsitivity","modified_at":1635359402000,"properties":{},"sections":[{"identifier":"responsitivity","level":1,"text":"Responsitivity"},{"identifier":"viewports","level":2,"text":"Viewports"},{"identifier":"syntax","level":2,"text":"Syntax"}],"slots":{},"snippets":[{"identifier":"responsitivity-syntax","script":"<script>\n    import {Box, Grid} from \"@kahi-ui/framework\";\n</script>\n\n<Grid.Container\n    class=\"responsitivity-syntax\"\n    points={[\"5\", \"mobile:2\", \"tablet:3\", \"desktop:4\"]}\n    spacing=\"medium\"\n>\n    <Box palette=\"alert\" />\n    <Box palette=\"affirmative\" />\n    <Box palette=\"negative\" />\n\n    <Box palette=\"affirmative\" />\n    <Box palette=\"negative\" />\n    <Box palette=\"alert\" />\n\n    <Box palette=\"alert\" />\n    <Box palette=\"affirmative\" />\n    <Box palette=\"negative\" />\n\n    <Box palette=\"negative\" />\n    <Box palette=\"alert\" />\n    <Box palette=\"affirmative\" />\n\n    <Box palette=\"affirmative\" />\n    <Box palette=\"negative\" />\n    <Box palette=\"alert\" />\n\n    <Box palette=\"negative\" />\n    <Box palette=\"alert\" />\n    <Box palette=\"affirmative\" />\n\n    <Box palette=\"alert\" />\n    <Box palette=\"affirmative\" />\n    <Box palette=\"negative\" />\n</Grid.Container>\n\n<style>\n    :global(.responsitivity-syntax .box) {\n        height: 3rem;\n    }\n</style>","syntax":"svelte","title":"Responsitivity Syntax"}],"title":"Responsitivity"},"render":"<h1 id=\"responsitivity\">Responsitivity</h1>\n<p>Kahi UI supports responsive design out of the box for the majority of its Components. Such as <a href=\"../layouts/grid\">Grid</a>, where you can define how many items are displayed at each Viewport.</p>\n<h2 id=\"viewports\">Viewports</h2>\n<p>As mentioned above, Kahi UI has the concept of four pre-defined breakpoints that are known as Viewports. Which are only active whenever the Browser window's width is within two sizes.</p>\n<div class=\"scrollable\"><table>\n<thead>\n<tr>\n<th>Viewport</th>\n<th>Minimum</th>\n<th>Maximum</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mobile</td>\n<td><code>0px</code></td>\n<td><code>640px</code></td>\n</tr>\n<tr>\n<td>tablet</td>\n<td><code>641px</code></td>\n<td><code>768px</code></td>\n</tr>\n<tr>\n<td>desktop</td>\n<td><code>769px</code></td>\n<td><code>1024px</code></td>\n</tr>\n<tr>\n<td>widescreen</td>\n<td><code>1025px</code></td>\n<td><code>âˆž</code></td>\n</tr>\n</tbody>\n</table>\n</div><h2 id=\"syntax\">Syntax</h2>\n<p>To be able to use Viewport-specific values, you just need to prefix your values with <code>{VIEWPORT}:</code>, e.g. <code>&lt;Grid points=&quot;mobile:3&quot;&gt;</code>. But then you can't specify default values or other Viewport-specifics. For that you need to pass an array in like below.</p>\n<blockquote data-palette=\"accent\">\n<p><strong>NOTE</strong>: The REPL currently does not support viewport values. Resize your Browser instead.</p>\n</blockquote>\n<iframe\n    class=\"snippet-repl\"\n    src=\"/repl/docs/framework/responsitivity/responsitivity-syntax?rotation=horizontal\"\n    sandbox=\"allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals allow-same-origin\" loading=\"lazy\"\n></iframe>\n<a href=\"/repl/docs/framework/responsitivity/responsitivity-syntax?rotation=horizontal\" hidden sveltekit:prefetch></a>"}}